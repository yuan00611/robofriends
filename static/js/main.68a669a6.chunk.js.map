{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","type","placeholder","onChange","this","props","searchChange","React","Component","Scroll","style","overflowY","height","children","App","onSearchChange","event","setState","searchfield","target","value","console","log","state","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzB,OACC,yBAAKC,UAAU,sDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA2BL,EAA3B,mBACrB,6BACC,4BAAMC,GACN,+BAAMC,MCiBKI,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCMTU,E,uKAfb,OACC,yBAAKT,UAAU,OACd,2BACCA,UAAU,kCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUC,KAAKC,MAAMC,oB,GARFC,IAAMC,WCQfC,EARA,SAACJ,GACf,OACC,yBAAKK,MAAO,CAAEC,UAAW,SAAUC,OAAO,UACxCP,EAAMQ,WCyCKC,G,wDArCb,aAAc,IAAD,8BACX,gBAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,QAC1CC,QAAQC,IAAIN,EAAMG,OAAOC,QAdzB,EAAKG,MAAQ,CACX5B,OAAQ,GACRuB,YAAa,IAJJ,E,gEAQO,IAAD,OACjBM,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEtB,OAAQiC,S,+BASlC,IAAD,OACAC,EAAiBzB,KAAKmB,MAAM5B,OAAOmC,QAAO,SAAAC,GAC9C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKV,MAAML,YAAYc,kBAElE,OACE,yBAAKzC,UAAU,UACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,aAAcF,KAAKW,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,OAASkC,U,GA9BXtB,IAAMC,YCIJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.68a669a6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n\treturn(\n\t\t<div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-4 tc'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${ id }?size=200x200` } />\n\t\t\t<div>\n\t\t\t\t<h2>{ name }</h2>\n\t\t\t\t<p> { email }</p>\n\t\t\t</div>\n\t\t</div>\n\t);\t\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email} \n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t\t\n\t\t</div>\n\t\t\t\n\t);\n}\n\n\nexport default CardList;","import React from 'react';\n\nclass SearchBox extends React.Component{\n\trender(){\n\t\treturn(\n\t\t\t<div className='pa2'>\n\t\t\t\t<input \n\t\t\t\t\tclassName='pa3 ba b--blue bg-lightest-blue'\n\t\t\t\t\ttype='search' \n\t\t\t\t\tplaceholder='search robots' \n\t\t\t\t\tonChange={this.props.searchChange}\n\t\t\t\t\t/>\n\t\t\t</div>\n\t\t\t\n\t\t);\n\t}\n\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn(\n\t\t<div style={{ overflowY: 'scroll', height:'500px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n// import logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n    console.log(event.target.value);\n    \n  }\n\n  render(){\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    return (\n      <div className=\"App tc\">\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <CardList robots={ filteredRobots } />\n        </Scroll>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n      </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}